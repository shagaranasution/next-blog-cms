generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          Role      @default(ADMIN) // Enum: USER, ADMIN
  image         String?
  phone         String?
  birthday      DateTime?
  gender        Gender? // Optional: Enum: MALE, FEMALE, OTHER
  articles      Article[] @relation("UserArticles") // Articles authored by the user
  comments      Comment[] @relation("UserComments") // Comments by the user
  likes         Like[]    @relation("UserLikes") // Likes by the user
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Article {
  id        String    @id @default(cuid())
  title     String
  content   String
  authorId  String    @map("author_id")
  author    User      @relation("UserArticles", fields: [authorId], references: [id])
  images    Image[]   @relation("ArticleImages") // One-to-many relation with Image
  comments  Comment[] @relation("ArticleComments")
  likes     Like[]    @relation("ArticleLikes")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Image {
  id        String   @id @default(cuid())
  url       String // Image URL
  articleId String   @map("article_id")
  article   Article  @relation(fields: [articleId], references: [id], name: "ArticleImages")
  createdAt DateTime @default(now()) @map("created_at")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String    @map("user_id")
  articleId String    @map("article_id")
  parentId  String?   @map("parent_id") // Nullable parent comment ID for replies
  user      User      @relation("UserComments", fields: [userId], references: [id])
  article   Article   @relation("ArticleComments", fields: [articleId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Like[]    @relation("CommentLikes")
  createdAt DateTime  @default(now()) @map("created_at")
}

model Like {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  articleId String?  @map("article_id") // Nullable to differentiate between article and comment likes
  commentId String?  @map("comment_id") // Nullable to differentiate between article and comment likes
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  article   Article? @relation("ArticleLikes", fields: [articleId], references: [id])
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
